# Solano CI configuration file
# https://ci.solanolabs.com

# Specify software versions/configuration
# http://docs.solanolabs.com/RunningBuild/configuring-with-solanoyml/
ruby_version: '2.2.3'
bundler_version: '1.15.4'
firefox: '45.0.1esr'
nodejs:
  version: '6.11.3' # Node is not used in the repo except for incremental caching example purposes
mysql:
  adapter: mysql2
  version: '5.7'
  config:
    encoding: utf8

# Specify environment variables enabled for all hooks/tests
# http://docs.solanolabs.com/Setup/setting-environment-variables/
environment:
  'RAILS_ENV': 'test'

# Instead of letting Solano CI's automatic 'bundle install' run, it will be handled by
# 'hooks.pre_setup' to only run when changes to the incremental cache supplied are detected.
# http://docs.solanolabs.com/Beta/incremental-caching/
skip_package:
  - ruby # 'bundle install' will be handled by 'hooks.pre_setup'

hooks:
  pre_setup: ./script/solano_pre_setup.sh # Runs db/bundle/node setup when necessary
  worker_setup: |
    # Load database dumped by 'pre_setup' if necessary
    if [ $(mysql -N -s mysql -u$TDDIUM_DB_USER -p$TDDIUM_DB_PASSWORD -e "SELECT COUNT(*) from information_schema.tables WHERE table_schema = '$TDDIUM_DB_NAME';") -eq 0 ]; then
      mysql -u$TDDIUM_DB_USER -p$TDDIUM_DB_PASSWORD $TDDIUM_DB_NAME < $TDDIUM_REPO_ROOT/tmp/db_dump.sql || exit $?
    fi

# Use Solano CI incremental caching to speed up the "prepare" phase of builds
# http://docs.solanolabs.com/Beta/incremental-caching/
# The 'script/solano_calculate_cache_key_hash.sh' key_script calculates the md5sum of supplied file/directory arguments
# and stores them in a known location for comparison in the 'hooks.pre_setup' script
# Usage: $0 key-name FILE|DIR [FILE|DIR ...]
cache:
  # Changes in certain directories/files trigger that portion of the cache to be rebuilt
  update_scripts:
    database:
      # first 'db' is key name, hash is generated from 'db/' directory contents
      key_script: ./script/solano_calculate_cache_key_hash.sh db db
      paths:
        - REPO/tmp/db_dump.sql
    bundle:
      # 'bundle' is key name, hash is generated from 'Gemfile[.lock]'' files
      key_script: ./script/solano_calculate_cache_key_hash.sh bundle Gemfile Gemfile.lock
      paths:
        - HOME/bundle
        - HOME/.gem
    node:
      # 'node' is key name, hash is generated from 'package.json' file
      key_script: ./script/solano_calculate_cache_key_hash.sh node package.json
      paths:
        - REPO/node_modules
      # An example incremental cache configuration using 'yarn' instead of 'npm'
      # key_script: ./script/solano_calculate_cache_key_hash.sh node package.json yarn.lock
      # paths:
      #   - REPO/node_modules
      #   - HOME/.cache/yarn
      #   - HOME/.yarn
  key_paths: [] # Unset default values
  save_paths:
    - HOME/cache-keys # Store computed cache keys for comparison in later builds
    # Include ~/usercache if other build artifacts/dependencies are stored there
    # - HOME/usercache

# Instead of using Solano CI's built-in ruby test runner, use parallel junit test type:
# http://docs.solanolabs.com/ConfiguringLanguage/java/#parallel-junit
# Using a custom parallel test runner may require a larger 'timeout' specified then the default 900 seconds,
# as the timeout is enforced on the entire test batch.
# There is a default system limit of 90 minutes (5400 seconds), but you can contact support@solanolabs.com
# to increase the 'runner_timeout_clamp' on a Solano organization level.
timeout: 1800
test_pattern:
  - none
tests:
  - type: junit
    mode: parallel
    command: bundle exec ./script/solano_rspec_runner.rb
    files:
      - spec/**/*_spec.rb
      #- exclude: spec/support/email_spec.rb
    report_files:
      - reports/*-rspec.xml
  #- bundle exec rspec spec/support/email_spec.rb